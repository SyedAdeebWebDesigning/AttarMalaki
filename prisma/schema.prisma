// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model user {
  id                    String     @id @default(auto()) @map("_id") @db.ObjectId
  clerkId               String     @unique
  firstName             String
  lastName              String
  email                 String     @unique
  isAdmin               Boolean    @default(false)
  imgUrl                String
  hasCompletedAddresses Boolean    @default(false)
  addresses             Address[] // One-to-Many Relationship
  createdAt             DateTime?  @default(now())
  updatedAt             DateTime?  @updatedAt
  Review                Review[]
  Wishlist              Wishlist[]
  Bag                   Bag[]
  Order                 Order[]
}

model Address {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  userId     String    @db.ObjectId
  user       user      @relation(fields: [userId], references: [id], onDelete: Cascade)
  label      String // e.g., "Home", "Work", or Custom Name
  street     String
  city       String
  state      String
  country    String
  zipCode    String
  isSelected Boolean   @default(false) // Indicates if this is the user's selected address
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@unique([userId, label]) // Ensure a user can only have one address with the same label
}

model Product {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  slug             String            @unique
  name             String
  description      String
  shortDescription String?
  category         String
  tags             String[]
  image            String
  rating           Float?
  reviewsCount     Int?
  isFeatured       Boolean           @default(false)
  isBestSeller     Boolean           @default(false)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  Review           Review[]
  quantities       ProductQuantity[]
  Wishlist         Wishlist[]
  Bag              Bag[]
  OrderItem        OrderItem[]
}

model ProductQuantity {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  productId     String  @db.ObjectId
  product       Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  size          Size
  price         Int
  discountPrice Int?
  stock         Int
}

enum Size {
  ML_20
  ML_50
  ML_100
}

model Review {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String    @db.ObjectId
  user      user      @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String    @db.ObjectId
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  rating    Int
  comment   String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([userId, productId]) // Ensure a user can only review a product once
}

model Wishlist {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String    @db.ObjectId
  user      user      @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String    @db.ObjectId
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([userId, productId]) // Ensure a user can only have one wishlist entry per product
}

model Bag {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String    @db.ObjectId
  user      user      @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String    @db.ObjectId
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int       @default(1)
  price     Int
  size      Size
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([userId, productId, size])
}

model Order {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  userId          String @db.ObjectId
  user            user   @relation(fields: [userId], references: [id])
  total           Float
  addressId       String @db.ObjectId
  stripeSession   String
  paymentMethodId String
  cardBrand       String
  cardLast4       String

  items     OrderItem[]
  createdAt DateTime    @default(now())
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String  @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  size      Size
  price     Int
}
